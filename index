#!/usr/bin/env node

var Case = require('case')
  , fs = require('fs')
  , path = require('path')
  , minimist = require('minimist')

// getting cli arguments
var argv = minimist(process.argv)

// loading the dictionary
var dictionary = loadDictionary()

// loading the file with the content to be replaced
var content = loadToReplace()

// doing the actual replacing
content = replace(dictionary, content)

// writing result to stdout
stdout(content)

function checkExistence (filepath) {
  if (!fs.existsSync(filepath)) {
    console.error('Coundn\'t find ' + filepath)
    process.exit(1)
  }
}

function loadDictionary ()  {
  var filepath = argv['dictionary'] || path.join(process.cwd(), './dictionary.json')

  checkExistence(filepath)

  return require(filepath.toString())
}

function loadToReplace () {
  var filepath = argv['to-replace']

  if (!filepath) {
      console.error(
        'You should provide the filepath to the original content to be replaced with the "--to-replace" argument.')
      process.exit(1)
  }

  checkExistence(filepath)

  return fs.readFileSync(filepath.toString(), 'utf8')
}

function replace (dictionary, content) {
  for (var key in dictionary) {
    var value = dictionary[key]
    var table = replacements(key, value)
    for (var _key in table) content = content.replace(_key, table[_key], 'g')
  }
  return content
}

function replacements (key, value) {
  var table = { }
  table[key] = value
  table[Case.capital(key)] = Case.capital(value)
  table[Case.snake(key)] = Case.snake(value)
  table[Case.lower(key)] = Case.lower(value)
  table[Case.upper(key)] = Case.upper(value)
  return table
}

function stdout (content) {
  process.stdout.write(content)
}
